/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.visualization.Add2DObject');
goog.provide('proto.visualization.Add3DObject');
goog.provide('proto.visualization.Ball');
goog.provide('proto.visualization.Box2D');
goog.provide('proto.visualization.Box3D');
goog.provide('proto.visualization.Circle');
goog.provide('proto.visualization.ColorRGBA');
goog.provide('proto.visualization.Command2D');
goog.provide('proto.visualization.Command3D');
goog.provide('proto.visualization.DeleteObject');
goog.provide('proto.visualization.Line2D');
goog.provide('proto.visualization.Material');
goog.provide('proto.visualization.Material.LineStyle');
goog.provide('proto.visualization.Point2D');
goog.provide('proto.visualization.Point3D');
goog.provide('proto.visualization.Polygon');
goog.provide('proto.visualization.Pose2D');
goog.provide('proto.visualization.Pose3D');
goog.provide('proto.visualization.Quaternion');
goog.provide('proto.visualization.Scene2DUpdate');
goog.provide('proto.visualization.Scene3DUpdate');
goog.provide('proto.visualization.Set2DAxisProperties');
goog.provide('proto.visualization.SetAxesVisible');
goog.provide('proto.visualization.SetGridVisible');
goog.provide('proto.visualization.SetLegend');
goog.provide('proto.visualization.SetTitle');
goog.provide('proto.visualization.Trajectory2D');
goog.provide('proto.visualization.Update2DObjectGeometry');
goog.provide('proto.visualization.Update3DObjectGeometry');
goog.provide('proto.visualization.UpdateObjectProperties');
goog.provide('proto.visualization.Vec2');
goog.provide('proto.visualization.Vec3');
goog.provide('proto.visualization.VertexList2D');
goog.provide('proto.visualization.VisMessage');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Vec2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Vec2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Vec2.displayName = 'proto.visualization.Vec2';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Vec2.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Vec2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Vec2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Vec2.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Vec2}
 */
proto.visualization.Vec2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Vec2;
  return proto.visualization.Vec2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Vec2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Vec2}
 */
proto.visualization.Vec2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Vec2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Vec2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Vec2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Vec2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.visualization.Vec2.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.visualization.Vec2.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.visualization.Vec2.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Vec2.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Vec3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Vec3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Vec3.displayName = 'proto.visualization.Vec3';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Vec3.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Vec3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Vec3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Vec3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Vec3}
 */
proto.visualization.Vec3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Vec3;
  return proto.visualization.Vec3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Vec3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Vec3}
 */
proto.visualization.Vec3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Vec3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Vec3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Vec3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Vec3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.visualization.Vec3.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.visualization.Vec3.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.visualization.Vec3.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Vec3.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.visualization.Vec3.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Vec3.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Quaternion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Quaternion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Quaternion.displayName = 'proto.visualization.Quaternion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Quaternion.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Quaternion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Quaternion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Quaternion.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Quaternion}
 */
proto.visualization.Quaternion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Quaternion;
  return proto.visualization.Quaternion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Quaternion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Quaternion}
 */
proto.visualization.Quaternion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Quaternion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Quaternion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Quaternion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Quaternion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getW();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float w = 1;
 * @return {number}
 */
proto.visualization.Quaternion.prototype.getW = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.visualization.Quaternion.prototype.setW = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.visualization.Quaternion.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Quaternion.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.visualization.Quaternion.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Quaternion.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float z = 4;
 * @return {number}
 */
proto.visualization.Quaternion.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.Quaternion.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.ColorRGBA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.ColorRGBA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.ColorRGBA.displayName = 'proto.visualization.ColorRGBA';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.ColorRGBA.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.ColorRGBA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.ColorRGBA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.ColorRGBA.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    g: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    b: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    a: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.ColorRGBA}
 */
proto.visualization.ColorRGBA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.ColorRGBA;
  return proto.visualization.ColorRGBA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.ColorRGBA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.ColorRGBA}
 */
proto.visualization.ColorRGBA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.ColorRGBA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.ColorRGBA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.ColorRGBA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.ColorRGBA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float r = 1;
 * @return {number}
 */
proto.visualization.ColorRGBA.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.visualization.ColorRGBA.prototype.setR = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float g = 2;
 * @return {number}
 */
proto.visualization.ColorRGBA.prototype.getG = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.ColorRGBA.prototype.setG = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float b = 3;
 * @return {number}
 */
proto.visualization.ColorRGBA.prototype.getB = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.ColorRGBA.prototype.setB = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float a = 4;
 * @return {number}
 */
proto.visualization.ColorRGBA.prototype.getA = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.ColorRGBA.prototype.setA = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.VertexList2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.VertexList2D.repeatedFields_, null);
};
goog.inherits(proto.visualization.VertexList2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.VertexList2D.displayName = 'proto.visualization.VertexList2D';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.VertexList2D.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.VertexList2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.VertexList2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.VertexList2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.VertexList2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.visualization.Vec2.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.VertexList2D}
 */
proto.visualization.VertexList2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.VertexList2D;
  return proto.visualization.VertexList2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.VertexList2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.VertexList2D}
 */
proto.visualization.VertexList2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Vec2;
      reader.readMessage(value,proto.visualization.Vec2.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.VertexList2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.VertexList2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.VertexList2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.VertexList2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.visualization.Vec2.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vec2 vertices = 1;
 * @return {!Array<!proto.visualization.Vec2>}
 */
proto.visualization.VertexList2D.prototype.getVerticesList = function() {
  return /** @type{!Array<!proto.visualization.Vec2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Vec2, 1));
};


/** @param {!Array<!proto.visualization.Vec2>} value */
proto.visualization.VertexList2D.prototype.setVerticesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.visualization.Vec2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Vec2}
 */
proto.visualization.VertexList2D.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.visualization.Vec2, opt_index);
};


proto.visualization.VertexList2D.prototype.clearVerticesList = function() {
  this.setVerticesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Point2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Point2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Point2D.displayName = 'proto.visualization.Point2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Point2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Point2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Point2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Point2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.visualization.Vec2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Point2D}
 */
proto.visualization.Point2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Point2D;
  return proto.visualization.Point2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Point2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Point2D}
 */
proto.visualization.Point2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Vec2;
      reader.readMessage(value,proto.visualization.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Point2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Point2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Point2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Point2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Vec2.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vec2 position = 1;
 * @return {?proto.visualization.Vec2}
 */
proto.visualization.Point2D.prototype.getPosition = function() {
  return /** @type{?proto.visualization.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Vec2, 1));
};


/** @param {?proto.visualization.Vec2|undefined} value */
proto.visualization.Point2D.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Point2D.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Point2D.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Pose2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Pose2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Pose2D.displayName = 'proto.visualization.Pose2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Pose2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Pose2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Pose2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Pose2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.visualization.Vec2.toObject(includeInstance, f),
    theta: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Pose2D}
 */
proto.visualization.Pose2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Pose2D;
  return proto.visualization.Pose2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Pose2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Pose2D}
 */
proto.visualization.Pose2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Vec2;
      reader.readMessage(value,proto.visualization.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTheta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Pose2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Pose2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Pose2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Pose2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getTheta();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Vec2 position = 1;
 * @return {?proto.visualization.Vec2}
 */
proto.visualization.Pose2D.prototype.getPosition = function() {
  return /** @type{?proto.visualization.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Vec2, 1));
};


/** @param {?proto.visualization.Vec2|undefined} value */
proto.visualization.Pose2D.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Pose2D.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Pose2D.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float theta = 2;
 * @return {number}
 */
proto.visualization.Pose2D.prototype.getTheta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Pose2D.prototype.setTheta = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Circle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Circle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Circle.displayName = 'proto.visualization.Circle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Circle.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Circle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Circle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Circle.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.visualization.Vec2.toObject(includeInstance, f),
    radius: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Circle}
 */
proto.visualization.Circle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Circle;
  return proto.visualization.Circle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Circle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Circle}
 */
proto.visualization.Circle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Vec2;
      reader.readMessage(value,proto.visualization.Vec2.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Circle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Circle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Circle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Circle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Vec2 center = 1;
 * @return {?proto.visualization.Vec2}
 */
proto.visualization.Circle.prototype.getCenter = function() {
  return /** @type{?proto.visualization.Vec2} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Vec2, 1));
};


/** @param {?proto.visualization.Vec2|undefined} value */
proto.visualization.Circle.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Circle.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Circle.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float radius = 2;
 * @return {number}
 */
proto.visualization.Circle.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Circle.prototype.setRadius = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Box2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Box2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Box2D.displayName = 'proto.visualization.Box2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Box2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Box2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Box2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Box2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.visualization.Pose2D.toObject(includeInstance, f),
    width: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    lengthFront: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    lengthRear: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Box2D}
 */
proto.visualization.Box2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Box2D;
  return proto.visualization.Box2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Box2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Box2D}
 */
proto.visualization.Box2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Pose2D;
      reader.readMessage(value,proto.visualization.Pose2D.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLengthFront(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLengthRear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Box2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Box2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Box2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Box2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Pose2D.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLengthFront();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLengthRear();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional Pose2D center = 1;
 * @return {?proto.visualization.Pose2D}
 */
proto.visualization.Box2D.prototype.getCenter = function() {
  return /** @type{?proto.visualization.Pose2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose2D, 1));
};


/** @param {?proto.visualization.Pose2D|undefined} value */
proto.visualization.Box2D.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Box2D.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Box2D.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float width = 2;
 * @return {number}
 */
proto.visualization.Box2D.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Box2D.prototype.setWidth = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float length_front = 3;
 * @return {number}
 */
proto.visualization.Box2D.prototype.getLengthFront = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Box2D.prototype.setLengthFront = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float length_rear = 4;
 * @return {number}
 */
proto.visualization.Box2D.prototype.getLengthRear = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.Box2D.prototype.setLengthRear = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Line2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.Line2D.repeatedFields_, null);
};
goog.inherits(proto.visualization.Line2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Line2D.displayName = 'proto.visualization.Line2D';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.Line2D.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Line2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Line2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Line2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Line2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.visualization.Point2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Line2D}
 */
proto.visualization.Line2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Line2D;
  return proto.visualization.Line2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Line2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Line2D}
 */
proto.visualization.Line2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Line2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Line2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Line2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Line2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point2D points = 1;
 * @return {!Array<!proto.visualization.Point2D>}
 */
proto.visualization.Line2D.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.visualization.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Point2D, 1));
};


/** @param {!Array<!proto.visualization.Point2D>} value */
proto.visualization.Line2D.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.visualization.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Point2D}
 */
proto.visualization.Line2D.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.visualization.Point2D, opt_index);
};


proto.visualization.Line2D.prototype.clearPointsList = function() {
  this.setPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Trajectory2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.Trajectory2D.repeatedFields_, null);
};
goog.inherits(proto.visualization.Trajectory2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Trajectory2D.displayName = 'proto.visualization.Trajectory2D';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.Trajectory2D.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Trajectory2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Trajectory2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Trajectory2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Trajectory2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    posesList: jspb.Message.toObjectList(msg.getPosesList(),
    proto.visualization.Box2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Trajectory2D}
 */
proto.visualization.Trajectory2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Trajectory2D;
  return proto.visualization.Trajectory2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Trajectory2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Trajectory2D}
 */
proto.visualization.Trajectory2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Box2D;
      reader.readMessage(value,proto.visualization.Box2D.deserializeBinaryFromReader);
      msg.addPoses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Trajectory2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Trajectory2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Trajectory2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Trajectory2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.visualization.Box2D.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Box2D poses = 1;
 * @return {!Array<!proto.visualization.Box2D>}
 */
proto.visualization.Trajectory2D.prototype.getPosesList = function() {
  return /** @type{!Array<!proto.visualization.Box2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Box2D, 1));
};


/** @param {!Array<!proto.visualization.Box2D>} value */
proto.visualization.Trajectory2D.prototype.setPosesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.visualization.Box2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Box2D}
 */
proto.visualization.Trajectory2D.prototype.addPoses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.visualization.Box2D, opt_index);
};


proto.visualization.Trajectory2D.prototype.clearPosesList = function() {
  this.setPosesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.Polygon.repeatedFields_, null);
};
goog.inherits(proto.visualization.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Polygon.displayName = 'proto.visualization.Polygon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.visualization.Point2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Polygon}
 */
proto.visualization.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Polygon;
  return proto.visualization.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Polygon}
 */
proto.visualization.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point2D vertices = 1;
 * @return {!Array<!proto.visualization.Point2D>}
 */
proto.visualization.Polygon.prototype.getVerticesList = function() {
  return /** @type{!Array<!proto.visualization.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Point2D, 1));
};


/** @param {!Array<!proto.visualization.Point2D>} value */
proto.visualization.Polygon.prototype.setVerticesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.visualization.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Point2D}
 */
proto.visualization.Polygon.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.visualization.Point2D, opt_index);
};


proto.visualization.Polygon.prototype.clearVerticesList = function() {
  this.setVerticesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Point3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Point3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Point3D.displayName = 'proto.visualization.Point3D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Point3D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Point3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Point3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Point3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.visualization.Vec3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Point3D}
 */
proto.visualization.Point3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Point3D;
  return proto.visualization.Point3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Point3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Point3D}
 */
proto.visualization.Point3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Vec3;
      reader.readMessage(value,proto.visualization.Vec3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Point3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Point3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Point3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Point3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Vec3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vec3 position = 1;
 * @return {?proto.visualization.Vec3}
 */
proto.visualization.Point3D.prototype.getPosition = function() {
  return /** @type{?proto.visualization.Vec3} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Vec3, 1));
};


/** @param {?proto.visualization.Vec3|undefined} value */
proto.visualization.Point3D.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Point3D.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Point3D.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Pose3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Pose3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Pose3D.displayName = 'proto.visualization.Pose3D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Pose3D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Pose3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Pose3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Pose3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.visualization.Point3D.toObject(includeInstance, f),
    quaternion: (f = msg.getQuaternion()) && proto.visualization.Quaternion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Pose3D}
 */
proto.visualization.Pose3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Pose3D;
  return proto.visualization.Pose3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Pose3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Pose3D}
 */
proto.visualization.Pose3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Point3D;
      reader.readMessage(value,proto.visualization.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.visualization.Quaternion;
      reader.readMessage(value,proto.visualization.Quaternion.deserializeBinaryFromReader);
      msg.setQuaternion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Pose3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Pose3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Pose3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Pose3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getQuaternion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Quaternion.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point3D position = 1;
 * @return {?proto.visualization.Point3D}
 */
proto.visualization.Pose3D.prototype.getPosition = function() {
  return /** @type{?proto.visualization.Point3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point3D, 1));
};


/** @param {?proto.visualization.Point3D|undefined} value */
proto.visualization.Pose3D.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Pose3D.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Pose3D.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Quaternion quaternion = 2;
 * @return {?proto.visualization.Quaternion}
 */
proto.visualization.Pose3D.prototype.getQuaternion = function() {
  return /** @type{?proto.visualization.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Quaternion, 2));
};


/** @param {?proto.visualization.Quaternion|undefined} value */
proto.visualization.Pose3D.prototype.setQuaternion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.Pose3D.prototype.clearQuaternion = function() {
  this.setQuaternion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Pose3D.prototype.hasQuaternion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Ball = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Ball, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Ball.displayName = 'proto.visualization.Ball';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Ball.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Ball.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Ball} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Ball.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.visualization.Point3D.toObject(includeInstance, f),
    radius: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Ball}
 */
proto.visualization.Ball.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Ball;
  return proto.visualization.Ball.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Ball} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Ball}
 */
proto.visualization.Ball.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Point3D;
      reader.readMessage(value,proto.visualization.Point3D.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Ball.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Ball.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Ball} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Ball.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Point3D center = 1;
 * @return {?proto.visualization.Point3D}
 */
proto.visualization.Ball.prototype.getCenter = function() {
  return /** @type{?proto.visualization.Point3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point3D, 1));
};


/** @param {?proto.visualization.Point3D|undefined} value */
proto.visualization.Ball.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Ball.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Ball.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float radius = 2;
 * @return {number}
 */
proto.visualization.Ball.prototype.getRadius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Ball.prototype.setRadius = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Box3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Box3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Box3D.displayName = 'proto.visualization.Box3D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Box3D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Box3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Box3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Box3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.visualization.Pose3D.toObject(includeInstance, f),
    xLength: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    yLength: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    zLength: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Box3D}
 */
proto.visualization.Box3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Box3D;
  return proto.visualization.Box3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Box3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Box3D}
 */
proto.visualization.Box3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Pose3D;
      reader.readMessage(value,proto.visualization.Pose3D.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Box3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Box3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Box3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Box3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Pose3D.serializeBinaryToWriter
    );
  }
  f = message.getXLength();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYLength();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getZLength();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional Pose3D center = 1;
 * @return {?proto.visualization.Pose3D}
 */
proto.visualization.Box3D.prototype.getCenter = function() {
  return /** @type{?proto.visualization.Pose3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose3D, 1));
};


/** @param {?proto.visualization.Pose3D|undefined} value */
proto.visualization.Box3D.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.visualization.Box3D.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Box3D.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float x_length = 2;
 * @return {number}
 */
proto.visualization.Box3D.prototype.getXLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.visualization.Box3D.prototype.setXLength = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y_length = 3;
 * @return {number}
 */
proto.visualization.Box3D.prototype.getYLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Box3D.prototype.setYLength = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float z_length = 4;
 * @return {number}
 */
proto.visualization.Box3D.prototype.getZLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.Box3D.prototype.setZLength = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Material = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Material, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Material.displayName = 'proto.visualization.Material';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Material.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Material.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Material} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Material.toObject = function(includeInstance, msg) {
  var f, obj = {
    legend: jspb.Message.getFieldWithDefault(msg, 1, ""),
    color: (f = msg.getColor()) && proto.visualization.ColorRGBA.toObject(includeInstance, f),
    pointSize: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    lineWidth: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    filled: jspb.Message.getFieldWithDefault(msg, 5, false),
    fillColor: (f = msg.getFillColor()) && proto.visualization.ColorRGBA.toObject(includeInstance, f),
    legendOn: jspb.Message.getFieldWithDefault(msg, 7, false),
    lineStyle: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Material}
 */
proto.visualization.Material.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Material;
  return proto.visualization.Material.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Material} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Material}
 */
proto.visualization.Material.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegend(value);
      break;
    case 2:
      var value = new proto.visualization.ColorRGBA;
      reader.readMessage(value,proto.visualization.ColorRGBA.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPointSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLineWidth(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilled(value);
      break;
    case 6:
      var value = new proto.visualization.ColorRGBA;
      reader.readMessage(value,proto.visualization.ColorRGBA.deserializeBinaryFromReader);
      msg.setFillColor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLegendOn(value);
      break;
    case 8:
      var value = /** @type {!proto.visualization.Material.LineStyle} */ (reader.readEnum());
      msg.setLineStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Material.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Material.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Material} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Material.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegend();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.ColorRGBA.serializeBinaryToWriter
    );
  }
  f = message.getPointSize();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLineWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getFilled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFillColor();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.visualization.ColorRGBA.serializeBinaryToWriter
    );
  }
  f = message.getLegendOn();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLineStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.visualization.Material.LineStyle = {
  SOLID: 0,
  DASHED: 1,
  DOTTED: 2
};

/**
 * optional string legend = 1;
 * @return {string}
 */
proto.visualization.Material.prototype.getLegend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Material.prototype.setLegend = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ColorRGBA color = 2;
 * @return {?proto.visualization.ColorRGBA}
 */
proto.visualization.Material.prototype.getColor = function() {
  return /** @type{?proto.visualization.ColorRGBA} */ (
    jspb.Message.getWrapperField(this, proto.visualization.ColorRGBA, 2));
};


/** @param {?proto.visualization.ColorRGBA|undefined} value */
proto.visualization.Material.prototype.setColor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.Material.prototype.clearColor = function() {
  this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Material.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float point_size = 3;
 * @return {number}
 */
proto.visualization.Material.prototype.getPointSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Material.prototype.setPointSize = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float line_width = 4;
 * @return {number}
 */
proto.visualization.Material.prototype.getLineWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.Material.prototype.setLineWidth = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool filled = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.Material.prototype.getFilled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.visualization.Material.prototype.setFilled = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional ColorRGBA fill_color = 6;
 * @return {?proto.visualization.ColorRGBA}
 */
proto.visualization.Material.prototype.getFillColor = function() {
  return /** @type{?proto.visualization.ColorRGBA} */ (
    jspb.Message.getWrapperField(this, proto.visualization.ColorRGBA, 6));
};


/** @param {?proto.visualization.ColorRGBA|undefined} value */
proto.visualization.Material.prototype.setFillColor = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.visualization.Material.prototype.clearFillColor = function() {
  this.setFillColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Material.prototype.hasFillColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool legend_on = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.Material.prototype.getLegendOn = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.visualization.Material.prototype.setLegendOn = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional LineStyle line_style = 8;
 * @return {!proto.visualization.Material.LineStyle}
 */
proto.visualization.Material.prototype.getLineStyle = function() {
  return /** @type {!proto.visualization.Material.LineStyle} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.visualization.Material.LineStyle} value */
proto.visualization.Material.prototype.setLineStyle = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Add2DObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Add2DObject.oneofGroups_);
};
goog.inherits(proto.visualization.Add2DObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Add2DObject.displayName = 'proto.visualization.Add2DObject';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Add2DObject.oneofGroups_ = [[3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.visualization.Add2DObject.GeometryDataCase = {
  GEOMETRY_DATA_NOT_SET: 0,
  POINT_2D: 3,
  POSE_2D: 4,
  CIRCLE: 5,
  BOX_2D: 6,
  LINE_2D: 7,
  TRAJECTORY_2D: 8,
  POLYGON: 9
};

/**
 * @return {proto.visualization.Add2DObject.GeometryDataCase}
 */
proto.visualization.Add2DObject.prototype.getGeometryDataCase = function() {
  return /** @type {proto.visualization.Add2DObject.GeometryDataCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Add2DObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Add2DObject.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Add2DObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Add2DObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Add2DObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    material: (f = msg.getMaterial()) && proto.visualization.Material.toObject(includeInstance, f),
    point2d: (f = msg.getPoint2d()) && proto.visualization.Point2D.toObject(includeInstance, f),
    pose2d: (f = msg.getPose2d()) && proto.visualization.Pose2D.toObject(includeInstance, f),
    circle: (f = msg.getCircle()) && proto.visualization.Circle.toObject(includeInstance, f),
    box2d: (f = msg.getBox2d()) && proto.visualization.Box2D.toObject(includeInstance, f),
    line2d: (f = msg.getLine2d()) && proto.visualization.Line2D.toObject(includeInstance, f),
    trajectory2d: (f = msg.getTrajectory2d()) && proto.visualization.Trajectory2D.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && proto.visualization.Polygon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Add2DObject}
 */
proto.visualization.Add2DObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Add2DObject;
  return proto.visualization.Add2DObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Add2DObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Add2DObject}
 */
proto.visualization.Add2DObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.visualization.Material;
      reader.readMessage(value,proto.visualization.Material.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    case 3:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    case 4:
      var value = new proto.visualization.Pose2D;
      reader.readMessage(value,proto.visualization.Pose2D.deserializeBinaryFromReader);
      msg.setPose2d(value);
      break;
    case 5:
      var value = new proto.visualization.Circle;
      reader.readMessage(value,proto.visualization.Circle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    case 6:
      var value = new proto.visualization.Box2D;
      reader.readMessage(value,proto.visualization.Box2D.deserializeBinaryFromReader);
      msg.setBox2d(value);
      break;
    case 7:
      var value = new proto.visualization.Line2D;
      reader.readMessage(value,proto.visualization.Line2D.deserializeBinaryFromReader);
      msg.setLine2d(value);
      break;
    case 8:
      var value = new proto.visualization.Trajectory2D;
      reader.readMessage(value,proto.visualization.Trajectory2D.deserializeBinaryFromReader);
      msg.setTrajectory2d(value);
      break;
    case 9:
      var value = new proto.visualization.Polygon;
      reader.readMessage(value,proto.visualization.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Add2DObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Add2DObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Add2DObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Add2DObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Material.serializeBinaryToWriter
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPose2d();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.Pose2D.serializeBinaryToWriter
    );
  }
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.visualization.Circle.serializeBinaryToWriter
    );
  }
  f = message.getBox2d();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.visualization.Box2D.serializeBinaryToWriter
    );
  }
  f = message.getLine2d();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.visualization.Line2D.serializeBinaryToWriter
    );
  }
  f = message.getTrajectory2d();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.visualization.Trajectory2D.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.visualization.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.Add2DObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Add2DObject.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Material material = 2;
 * @return {?proto.visualization.Material}
 */
proto.visualization.Add2DObject.prototype.getMaterial = function() {
  return /** @type{?proto.visualization.Material} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Material, 2));
};


/** @param {?proto.visualization.Material|undefined} value */
proto.visualization.Add2DObject.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.Add2DObject.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point2D point_2d = 3;
 * @return {?proto.visualization.Point2D}
 */
proto.visualization.Add2DObject.prototype.getPoint2d = function() {
  return /** @type{?proto.visualization.Point2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point2D, 3));
};


/** @param {?proto.visualization.Point2D|undefined} value */
proto.visualization.Add2DObject.prototype.setPoint2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearPoint2d = function() {
  this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pose2D pose_2d = 4;
 * @return {?proto.visualization.Pose2D}
 */
proto.visualization.Add2DObject.prototype.getPose2d = function() {
  return /** @type{?proto.visualization.Pose2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose2D, 4));
};


/** @param {?proto.visualization.Pose2D|undefined} value */
proto.visualization.Add2DObject.prototype.setPose2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearPose2d = function() {
  this.setPose2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasPose2d = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Circle circle = 5;
 * @return {?proto.visualization.Circle}
 */
proto.visualization.Add2DObject.prototype.getCircle = function() {
  return /** @type{?proto.visualization.Circle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Circle, 5));
};


/** @param {?proto.visualization.Circle|undefined} value */
proto.visualization.Add2DObject.prototype.setCircle = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearCircle = function() {
  this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Box2D box_2d = 6;
 * @return {?proto.visualization.Box2D}
 */
proto.visualization.Add2DObject.prototype.getBox2d = function() {
  return /** @type{?proto.visualization.Box2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box2D, 6));
};


/** @param {?proto.visualization.Box2D|undefined} value */
proto.visualization.Add2DObject.prototype.setBox2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearBox2d = function() {
  this.setBox2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasBox2d = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Line2D line_2d = 7;
 * @return {?proto.visualization.Line2D}
 */
proto.visualization.Add2DObject.prototype.getLine2d = function() {
  return /** @type{?proto.visualization.Line2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Line2D, 7));
};


/** @param {?proto.visualization.Line2D|undefined} value */
proto.visualization.Add2DObject.prototype.setLine2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearLine2d = function() {
  this.setLine2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasLine2d = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Trajectory2D trajectory_2d = 8;
 * @return {?proto.visualization.Trajectory2D}
 */
proto.visualization.Add2DObject.prototype.getTrajectory2d = function() {
  return /** @type{?proto.visualization.Trajectory2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Trajectory2D, 8));
};


/** @param {?proto.visualization.Trajectory2D|undefined} value */
proto.visualization.Add2DObject.prototype.setTrajectory2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearTrajectory2d = function() {
  this.setTrajectory2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasTrajectory2d = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Polygon polygon = 9;
 * @return {?proto.visualization.Polygon}
 */
proto.visualization.Add2DObject.prototype.getPolygon = function() {
  return /** @type{?proto.visualization.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Polygon, 9));
};


/** @param {?proto.visualization.Polygon|undefined} value */
proto.visualization.Add2DObject.prototype.setPolygon = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.visualization.Add2DObject.oneofGroups_[0], value);
};


proto.visualization.Add2DObject.prototype.clearPolygon = function() {
  this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add2DObject.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Add3DObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Add3DObject.oneofGroups_);
};
goog.inherits(proto.visualization.Add3DObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Add3DObject.displayName = 'proto.visualization.Add3DObject';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Add3DObject.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.visualization.Add3DObject.GeometryDataCase = {
  GEOMETRY_DATA_NOT_SET: 0,
  POINT_2D: 3,
  POSE_2D: 4,
  CIRCLE: 5,
  BOX_2D: 6,
  LINE_2D: 7,
  TRAJECTORY_2D: 8,
  POLYGON: 9,
  POINT_3D: 10,
  POSE_3D: 11,
  BALL: 12,
  BOX_3D: 13
};

/**
 * @return {proto.visualization.Add3DObject.GeometryDataCase}
 */
proto.visualization.Add3DObject.prototype.getGeometryDataCase = function() {
  return /** @type {proto.visualization.Add3DObject.GeometryDataCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Add3DObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Add3DObject.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Add3DObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Add3DObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Add3DObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    material: (f = msg.getMaterial()) && proto.visualization.Material.toObject(includeInstance, f),
    point2d: (f = msg.getPoint2d()) && proto.visualization.Point2D.toObject(includeInstance, f),
    pose2d: (f = msg.getPose2d()) && proto.visualization.Pose2D.toObject(includeInstance, f),
    circle: (f = msg.getCircle()) && proto.visualization.Circle.toObject(includeInstance, f),
    box2d: (f = msg.getBox2d()) && proto.visualization.Box2D.toObject(includeInstance, f),
    line2d: (f = msg.getLine2d()) && proto.visualization.Line2D.toObject(includeInstance, f),
    trajectory2d: (f = msg.getTrajectory2d()) && proto.visualization.Trajectory2D.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && proto.visualization.Polygon.toObject(includeInstance, f),
    point3d: (f = msg.getPoint3d()) && proto.visualization.Point3D.toObject(includeInstance, f),
    pose3d: (f = msg.getPose3d()) && proto.visualization.Pose3D.toObject(includeInstance, f),
    ball: (f = msg.getBall()) && proto.visualization.Ball.toObject(includeInstance, f),
    box3d: (f = msg.getBox3d()) && proto.visualization.Box3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Add3DObject}
 */
proto.visualization.Add3DObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Add3DObject;
  return proto.visualization.Add3DObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Add3DObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Add3DObject}
 */
proto.visualization.Add3DObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.visualization.Material;
      reader.readMessage(value,proto.visualization.Material.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    case 3:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    case 4:
      var value = new proto.visualization.Pose2D;
      reader.readMessage(value,proto.visualization.Pose2D.deserializeBinaryFromReader);
      msg.setPose2d(value);
      break;
    case 5:
      var value = new proto.visualization.Circle;
      reader.readMessage(value,proto.visualization.Circle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    case 6:
      var value = new proto.visualization.Box2D;
      reader.readMessage(value,proto.visualization.Box2D.deserializeBinaryFromReader);
      msg.setBox2d(value);
      break;
    case 7:
      var value = new proto.visualization.Line2D;
      reader.readMessage(value,proto.visualization.Line2D.deserializeBinaryFromReader);
      msg.setLine2d(value);
      break;
    case 8:
      var value = new proto.visualization.Trajectory2D;
      reader.readMessage(value,proto.visualization.Trajectory2D.deserializeBinaryFromReader);
      msg.setTrajectory2d(value);
      break;
    case 9:
      var value = new proto.visualization.Polygon;
      reader.readMessage(value,proto.visualization.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 10:
      var value = new proto.visualization.Point3D;
      reader.readMessage(value,proto.visualization.Point3D.deserializeBinaryFromReader);
      msg.setPoint3d(value);
      break;
    case 11:
      var value = new proto.visualization.Pose3D;
      reader.readMessage(value,proto.visualization.Pose3D.deserializeBinaryFromReader);
      msg.setPose3d(value);
      break;
    case 12:
      var value = new proto.visualization.Ball;
      reader.readMessage(value,proto.visualization.Ball.deserializeBinaryFromReader);
      msg.setBall(value);
      break;
    case 13:
      var value = new proto.visualization.Box3D;
      reader.readMessage(value,proto.visualization.Box3D.deserializeBinaryFromReader);
      msg.setBox3d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Add3DObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Add3DObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Add3DObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Add3DObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Material.serializeBinaryToWriter
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPose2d();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.Pose2D.serializeBinaryToWriter
    );
  }
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.visualization.Circle.serializeBinaryToWriter
    );
  }
  f = message.getBox2d();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.visualization.Box2D.serializeBinaryToWriter
    );
  }
  f = message.getLine2d();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.visualization.Line2D.serializeBinaryToWriter
    );
  }
  f = message.getTrajectory2d();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.visualization.Trajectory2D.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.visualization.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getPoint3d();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.visualization.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getPose3d();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.visualization.Pose3D.serializeBinaryToWriter
    );
  }
  f = message.getBall();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.visualization.Ball.serializeBinaryToWriter
    );
  }
  f = message.getBox3d();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.visualization.Box3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.Add3DObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Add3DObject.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Material material = 2;
 * @return {?proto.visualization.Material}
 */
proto.visualization.Add3DObject.prototype.getMaterial = function() {
  return /** @type{?proto.visualization.Material} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Material, 2));
};


/** @param {?proto.visualization.Material|undefined} value */
proto.visualization.Add3DObject.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.Add3DObject.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point2D point_2d = 3;
 * @return {?proto.visualization.Point2D}
 */
proto.visualization.Add3DObject.prototype.getPoint2d = function() {
  return /** @type{?proto.visualization.Point2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point2D, 3));
};


/** @param {?proto.visualization.Point2D|undefined} value */
proto.visualization.Add3DObject.prototype.setPoint2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearPoint2d = function() {
  this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pose2D pose_2d = 4;
 * @return {?proto.visualization.Pose2D}
 */
proto.visualization.Add3DObject.prototype.getPose2d = function() {
  return /** @type{?proto.visualization.Pose2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose2D, 4));
};


/** @param {?proto.visualization.Pose2D|undefined} value */
proto.visualization.Add3DObject.prototype.setPose2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearPose2d = function() {
  this.setPose2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasPose2d = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Circle circle = 5;
 * @return {?proto.visualization.Circle}
 */
proto.visualization.Add3DObject.prototype.getCircle = function() {
  return /** @type{?proto.visualization.Circle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Circle, 5));
};


/** @param {?proto.visualization.Circle|undefined} value */
proto.visualization.Add3DObject.prototype.setCircle = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearCircle = function() {
  this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Box2D box_2d = 6;
 * @return {?proto.visualization.Box2D}
 */
proto.visualization.Add3DObject.prototype.getBox2d = function() {
  return /** @type{?proto.visualization.Box2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box2D, 6));
};


/** @param {?proto.visualization.Box2D|undefined} value */
proto.visualization.Add3DObject.prototype.setBox2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearBox2d = function() {
  this.setBox2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasBox2d = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Line2D line_2d = 7;
 * @return {?proto.visualization.Line2D}
 */
proto.visualization.Add3DObject.prototype.getLine2d = function() {
  return /** @type{?proto.visualization.Line2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Line2D, 7));
};


/** @param {?proto.visualization.Line2D|undefined} value */
proto.visualization.Add3DObject.prototype.setLine2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearLine2d = function() {
  this.setLine2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasLine2d = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Trajectory2D trajectory_2d = 8;
 * @return {?proto.visualization.Trajectory2D}
 */
proto.visualization.Add3DObject.prototype.getTrajectory2d = function() {
  return /** @type{?proto.visualization.Trajectory2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Trajectory2D, 8));
};


/** @param {?proto.visualization.Trajectory2D|undefined} value */
proto.visualization.Add3DObject.prototype.setTrajectory2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearTrajectory2d = function() {
  this.setTrajectory2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasTrajectory2d = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Polygon polygon = 9;
 * @return {?proto.visualization.Polygon}
 */
proto.visualization.Add3DObject.prototype.getPolygon = function() {
  return /** @type{?proto.visualization.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Polygon, 9));
};


/** @param {?proto.visualization.Polygon|undefined} value */
proto.visualization.Add3DObject.prototype.setPolygon = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearPolygon = function() {
  this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Point3D point_3d = 10;
 * @return {?proto.visualization.Point3D}
 */
proto.visualization.Add3DObject.prototype.getPoint3d = function() {
  return /** @type{?proto.visualization.Point3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point3D, 10));
};


/** @param {?proto.visualization.Point3D|undefined} value */
proto.visualization.Add3DObject.prototype.setPoint3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearPoint3d = function() {
  this.setPoint3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasPoint3d = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Pose3D pose_3d = 11;
 * @return {?proto.visualization.Pose3D}
 */
proto.visualization.Add3DObject.prototype.getPose3d = function() {
  return /** @type{?proto.visualization.Pose3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose3D, 11));
};


/** @param {?proto.visualization.Pose3D|undefined} value */
proto.visualization.Add3DObject.prototype.setPose3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearPose3d = function() {
  this.setPose3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasPose3d = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Ball ball = 12;
 * @return {?proto.visualization.Ball}
 */
proto.visualization.Add3DObject.prototype.getBall = function() {
  return /** @type{?proto.visualization.Ball} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Ball, 12));
};


/** @param {?proto.visualization.Ball|undefined} value */
proto.visualization.Add3DObject.prototype.setBall = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearBall = function() {
  this.setBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasBall = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Box3D box_3d = 13;
 * @return {?proto.visualization.Box3D}
 */
proto.visualization.Add3DObject.prototype.getBox3d = function() {
  return /** @type{?proto.visualization.Box3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box3D, 13));
};


/** @param {?proto.visualization.Box3D|undefined} value */
proto.visualization.Add3DObject.prototype.setBox3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.visualization.Add3DObject.oneofGroups_[0], value);
};


proto.visualization.Add3DObject.prototype.clearBox3d = function() {
  this.setBox3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Add3DObject.prototype.hasBox3d = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Update2DObjectGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Update2DObjectGeometry.oneofGroups_);
};
goog.inherits(proto.visualization.Update2DObjectGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Update2DObjectGeometry.displayName = 'proto.visualization.Update2DObjectGeometry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Update2DObjectGeometry.oneofGroups_ = [[3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.visualization.Update2DObjectGeometry.GeometryDataCase = {
  GEOMETRY_DATA_NOT_SET: 0,
  POINT_2D: 3,
  POSE_2D: 4,
  CIRCLE: 5,
  BOX_2D: 6,
  LINE_2D: 7,
  TRAJECTORY_2D: 8,
  POLYGON: 9
};

/**
 * @return {proto.visualization.Update2DObjectGeometry.GeometryDataCase}
 */
proto.visualization.Update2DObjectGeometry.prototype.getGeometryDataCase = function() {
  return /** @type {proto.visualization.Update2DObjectGeometry.GeometryDataCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Update2DObjectGeometry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Update2DObjectGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Update2DObjectGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Update2DObjectGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Update2DObjectGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    point2d: (f = msg.getPoint2d()) && proto.visualization.Point2D.toObject(includeInstance, f),
    pose2d: (f = msg.getPose2d()) && proto.visualization.Pose2D.toObject(includeInstance, f),
    circle: (f = msg.getCircle()) && proto.visualization.Circle.toObject(includeInstance, f),
    box2d: (f = msg.getBox2d()) && proto.visualization.Box2D.toObject(includeInstance, f),
    line2d: (f = msg.getLine2d()) && proto.visualization.Line2D.toObject(includeInstance, f),
    trajectory2d: (f = msg.getTrajectory2d()) && proto.visualization.Trajectory2D.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && proto.visualization.Polygon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Update2DObjectGeometry}
 */
proto.visualization.Update2DObjectGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Update2DObjectGeometry;
  return proto.visualization.Update2DObjectGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Update2DObjectGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Update2DObjectGeometry}
 */
proto.visualization.Update2DObjectGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    case 4:
      var value = new proto.visualization.Pose2D;
      reader.readMessage(value,proto.visualization.Pose2D.deserializeBinaryFromReader);
      msg.setPose2d(value);
      break;
    case 5:
      var value = new proto.visualization.Circle;
      reader.readMessage(value,proto.visualization.Circle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    case 6:
      var value = new proto.visualization.Box2D;
      reader.readMessage(value,proto.visualization.Box2D.deserializeBinaryFromReader);
      msg.setBox2d(value);
      break;
    case 7:
      var value = new proto.visualization.Line2D;
      reader.readMessage(value,proto.visualization.Line2D.deserializeBinaryFromReader);
      msg.setLine2d(value);
      break;
    case 8:
      var value = new proto.visualization.Trajectory2D;
      reader.readMessage(value,proto.visualization.Trajectory2D.deserializeBinaryFromReader);
      msg.setTrajectory2d(value);
      break;
    case 9:
      var value = new proto.visualization.Polygon;
      reader.readMessage(value,proto.visualization.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Update2DObjectGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Update2DObjectGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Update2DObjectGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Update2DObjectGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPose2d();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.Pose2D.serializeBinaryToWriter
    );
  }
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.visualization.Circle.serializeBinaryToWriter
    );
  }
  f = message.getBox2d();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.visualization.Box2D.serializeBinaryToWriter
    );
  }
  f = message.getLine2d();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.visualization.Line2D.serializeBinaryToWriter
    );
  }
  f = message.getTrajectory2d();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.visualization.Trajectory2D.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.visualization.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.Update2DObjectGeometry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Update2DObjectGeometry.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Point2D point_2d = 3;
 * @return {?proto.visualization.Point2D}
 */
proto.visualization.Update2DObjectGeometry.prototype.getPoint2d = function() {
  return /** @type{?proto.visualization.Point2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point2D, 3));
};


/** @param {?proto.visualization.Point2D|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setPoint2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearPoint2d = function() {
  this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pose2D pose_2d = 4;
 * @return {?proto.visualization.Pose2D}
 */
proto.visualization.Update2DObjectGeometry.prototype.getPose2d = function() {
  return /** @type{?proto.visualization.Pose2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose2D, 4));
};


/** @param {?proto.visualization.Pose2D|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setPose2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearPose2d = function() {
  this.setPose2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasPose2d = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Circle circle = 5;
 * @return {?proto.visualization.Circle}
 */
proto.visualization.Update2DObjectGeometry.prototype.getCircle = function() {
  return /** @type{?proto.visualization.Circle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Circle, 5));
};


/** @param {?proto.visualization.Circle|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setCircle = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearCircle = function() {
  this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Box2D box_2d = 6;
 * @return {?proto.visualization.Box2D}
 */
proto.visualization.Update2DObjectGeometry.prototype.getBox2d = function() {
  return /** @type{?proto.visualization.Box2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box2D, 6));
};


/** @param {?proto.visualization.Box2D|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setBox2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearBox2d = function() {
  this.setBox2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasBox2d = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Line2D line_2d = 7;
 * @return {?proto.visualization.Line2D}
 */
proto.visualization.Update2DObjectGeometry.prototype.getLine2d = function() {
  return /** @type{?proto.visualization.Line2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Line2D, 7));
};


/** @param {?proto.visualization.Line2D|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setLine2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearLine2d = function() {
  this.setLine2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasLine2d = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Trajectory2D trajectory_2d = 8;
 * @return {?proto.visualization.Trajectory2D}
 */
proto.visualization.Update2DObjectGeometry.prototype.getTrajectory2d = function() {
  return /** @type{?proto.visualization.Trajectory2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Trajectory2D, 8));
};


/** @param {?proto.visualization.Trajectory2D|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setTrajectory2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearTrajectory2d = function() {
  this.setTrajectory2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasTrajectory2d = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Polygon polygon = 9;
 * @return {?proto.visualization.Polygon}
 */
proto.visualization.Update2DObjectGeometry.prototype.getPolygon = function() {
  return /** @type{?proto.visualization.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Polygon, 9));
};


/** @param {?proto.visualization.Polygon|undefined} value */
proto.visualization.Update2DObjectGeometry.prototype.setPolygon = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.visualization.Update2DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update2DObjectGeometry.prototype.clearPolygon = function() {
  this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update2DObjectGeometry.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Update3DObjectGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Update3DObjectGeometry.oneofGroups_);
};
goog.inherits(proto.visualization.Update3DObjectGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Update3DObjectGeometry.displayName = 'proto.visualization.Update3DObjectGeometry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Update3DObjectGeometry.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.visualization.Update3DObjectGeometry.GeometryDataCase = {
  GEOMETRY_DATA_NOT_SET: 0,
  POINT_2D: 3,
  POSE_2D: 4,
  CIRCLE: 5,
  BOX_2D: 6,
  LINE_2D: 7,
  TRAJECTORY_2D: 8,
  POLYGON: 9,
  POINT_3D: 10,
  POSE_3D: 11,
  BALL: 12,
  BOX_3D: 13
};

/**
 * @return {proto.visualization.Update3DObjectGeometry.GeometryDataCase}
 */
proto.visualization.Update3DObjectGeometry.prototype.getGeometryDataCase = function() {
  return /** @type {proto.visualization.Update3DObjectGeometry.GeometryDataCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Update3DObjectGeometry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Update3DObjectGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Update3DObjectGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Update3DObjectGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Update3DObjectGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    point2d: (f = msg.getPoint2d()) && proto.visualization.Point2D.toObject(includeInstance, f),
    pose2d: (f = msg.getPose2d()) && proto.visualization.Pose2D.toObject(includeInstance, f),
    circle: (f = msg.getCircle()) && proto.visualization.Circle.toObject(includeInstance, f),
    box2d: (f = msg.getBox2d()) && proto.visualization.Box2D.toObject(includeInstance, f),
    line2d: (f = msg.getLine2d()) && proto.visualization.Line2D.toObject(includeInstance, f),
    trajectory2d: (f = msg.getTrajectory2d()) && proto.visualization.Trajectory2D.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && proto.visualization.Polygon.toObject(includeInstance, f),
    point3d: (f = msg.getPoint3d()) && proto.visualization.Point3D.toObject(includeInstance, f),
    pose3d: (f = msg.getPose3d()) && proto.visualization.Pose3D.toObject(includeInstance, f),
    ball: (f = msg.getBall()) && proto.visualization.Ball.toObject(includeInstance, f),
    box3d: (f = msg.getBox3d()) && proto.visualization.Box3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Update3DObjectGeometry}
 */
proto.visualization.Update3DObjectGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Update3DObjectGeometry;
  return proto.visualization.Update3DObjectGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Update3DObjectGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Update3DObjectGeometry}
 */
proto.visualization.Update3DObjectGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.visualization.Point2D;
      reader.readMessage(value,proto.visualization.Point2D.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    case 4:
      var value = new proto.visualization.Pose2D;
      reader.readMessage(value,proto.visualization.Pose2D.deserializeBinaryFromReader);
      msg.setPose2d(value);
      break;
    case 5:
      var value = new proto.visualization.Circle;
      reader.readMessage(value,proto.visualization.Circle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    case 6:
      var value = new proto.visualization.Box2D;
      reader.readMessage(value,proto.visualization.Box2D.deserializeBinaryFromReader);
      msg.setBox2d(value);
      break;
    case 7:
      var value = new proto.visualization.Line2D;
      reader.readMessage(value,proto.visualization.Line2D.deserializeBinaryFromReader);
      msg.setLine2d(value);
      break;
    case 8:
      var value = new proto.visualization.Trajectory2D;
      reader.readMessage(value,proto.visualization.Trajectory2D.deserializeBinaryFromReader);
      msg.setTrajectory2d(value);
      break;
    case 9:
      var value = new proto.visualization.Polygon;
      reader.readMessage(value,proto.visualization.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 10:
      var value = new proto.visualization.Point3D;
      reader.readMessage(value,proto.visualization.Point3D.deserializeBinaryFromReader);
      msg.setPoint3d(value);
      break;
    case 11:
      var value = new proto.visualization.Pose3D;
      reader.readMessage(value,proto.visualization.Pose3D.deserializeBinaryFromReader);
      msg.setPose3d(value);
      break;
    case 12:
      var value = new proto.visualization.Ball;
      reader.readMessage(value,proto.visualization.Ball.deserializeBinaryFromReader);
      msg.setBall(value);
      break;
    case 13:
      var value = new proto.visualization.Box3D;
      reader.readMessage(value,proto.visualization.Box3D.deserializeBinaryFromReader);
      msg.setBox3d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Update3DObjectGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Update3DObjectGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Update3DObjectGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Update3DObjectGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPose2d();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.Pose2D.serializeBinaryToWriter
    );
  }
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.visualization.Circle.serializeBinaryToWriter
    );
  }
  f = message.getBox2d();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.visualization.Box2D.serializeBinaryToWriter
    );
  }
  f = message.getLine2d();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.visualization.Line2D.serializeBinaryToWriter
    );
  }
  f = message.getTrajectory2d();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.visualization.Trajectory2D.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.visualization.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getPoint3d();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.visualization.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getPose3d();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.visualization.Pose3D.serializeBinaryToWriter
    );
  }
  f = message.getBall();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.visualization.Ball.serializeBinaryToWriter
    );
  }
  f = message.getBox3d();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.visualization.Box3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.Update3DObjectGeometry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Update3DObjectGeometry.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Point2D point_2d = 3;
 * @return {?proto.visualization.Point2D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getPoint2d = function() {
  return /** @type{?proto.visualization.Point2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point2D, 3));
};


/** @param {?proto.visualization.Point2D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setPoint2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearPoint2d = function() {
  this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pose2D pose_2d = 4;
 * @return {?proto.visualization.Pose2D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getPose2d = function() {
  return /** @type{?proto.visualization.Pose2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose2D, 4));
};


/** @param {?proto.visualization.Pose2D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setPose2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearPose2d = function() {
  this.setPose2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasPose2d = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Circle circle = 5;
 * @return {?proto.visualization.Circle}
 */
proto.visualization.Update3DObjectGeometry.prototype.getCircle = function() {
  return /** @type{?proto.visualization.Circle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Circle, 5));
};


/** @param {?proto.visualization.Circle|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setCircle = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearCircle = function() {
  this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Box2D box_2d = 6;
 * @return {?proto.visualization.Box2D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getBox2d = function() {
  return /** @type{?proto.visualization.Box2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box2D, 6));
};


/** @param {?proto.visualization.Box2D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setBox2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearBox2d = function() {
  this.setBox2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasBox2d = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Line2D line_2d = 7;
 * @return {?proto.visualization.Line2D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getLine2d = function() {
  return /** @type{?proto.visualization.Line2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Line2D, 7));
};


/** @param {?proto.visualization.Line2D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setLine2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearLine2d = function() {
  this.setLine2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasLine2d = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Trajectory2D trajectory_2d = 8;
 * @return {?proto.visualization.Trajectory2D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getTrajectory2d = function() {
  return /** @type{?proto.visualization.Trajectory2D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Trajectory2D, 8));
};


/** @param {?proto.visualization.Trajectory2D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setTrajectory2d = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearTrajectory2d = function() {
  this.setTrajectory2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasTrajectory2d = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Polygon polygon = 9;
 * @return {?proto.visualization.Polygon}
 */
proto.visualization.Update3DObjectGeometry.prototype.getPolygon = function() {
  return /** @type{?proto.visualization.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Polygon, 9));
};


/** @param {?proto.visualization.Polygon|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setPolygon = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearPolygon = function() {
  this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Point3D point_3d = 10;
 * @return {?proto.visualization.Point3D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getPoint3d = function() {
  return /** @type{?proto.visualization.Point3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Point3D, 10));
};


/** @param {?proto.visualization.Point3D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setPoint3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearPoint3d = function() {
  this.setPoint3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasPoint3d = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Pose3D pose_3d = 11;
 * @return {?proto.visualization.Pose3D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getPose3d = function() {
  return /** @type{?proto.visualization.Pose3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Pose3D, 11));
};


/** @param {?proto.visualization.Pose3D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setPose3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearPose3d = function() {
  this.setPose3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasPose3d = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Ball ball = 12;
 * @return {?proto.visualization.Ball}
 */
proto.visualization.Update3DObjectGeometry.prototype.getBall = function() {
  return /** @type{?proto.visualization.Ball} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Ball, 12));
};


/** @param {?proto.visualization.Ball|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setBall = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearBall = function() {
  this.setBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasBall = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Box3D box_3d = 13;
 * @return {?proto.visualization.Box3D}
 */
proto.visualization.Update3DObjectGeometry.prototype.getBox3d = function() {
  return /** @type{?proto.visualization.Box3D} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Box3D, 13));
};


/** @param {?proto.visualization.Box3D|undefined} value */
proto.visualization.Update3DObjectGeometry.prototype.setBox3d = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.visualization.Update3DObjectGeometry.oneofGroups_[0], value);
};


proto.visualization.Update3DObjectGeometry.prototype.clearBox3d = function() {
  this.setBox3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Update3DObjectGeometry.prototype.hasBox3d = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.UpdateObjectProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.UpdateObjectProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.UpdateObjectProperties.displayName = 'proto.visualization.UpdateObjectProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.UpdateObjectProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.UpdateObjectProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.UpdateObjectProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.UpdateObjectProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    material: (f = msg.getMaterial()) && proto.visualization.Material.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.UpdateObjectProperties}
 */
proto.visualization.UpdateObjectProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.UpdateObjectProperties;
  return proto.visualization.UpdateObjectProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.UpdateObjectProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.UpdateObjectProperties}
 */
proto.visualization.UpdateObjectProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.visualization.Material;
      reader.readMessage(value,proto.visualization.Material.deserializeBinaryFromReader);
      msg.setMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.UpdateObjectProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.UpdateObjectProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.UpdateObjectProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.UpdateObjectProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaterial();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Material.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.UpdateObjectProperties.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.UpdateObjectProperties.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Material material = 2;
 * @return {?proto.visualization.Material}
 */
proto.visualization.UpdateObjectProperties.prototype.getMaterial = function() {
  return /** @type{?proto.visualization.Material} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Material, 2));
};


/** @param {?proto.visualization.Material|undefined} value */
proto.visualization.UpdateObjectProperties.prototype.setMaterial = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.UpdateObjectProperties.prototype.clearMaterial = function() {
  this.setMaterial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.UpdateObjectProperties.prototype.hasMaterial = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.DeleteObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.DeleteObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.DeleteObject.displayName = 'proto.visualization.DeleteObject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.DeleteObject.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.DeleteObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.DeleteObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.DeleteObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.DeleteObject}
 */
proto.visualization.DeleteObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.DeleteObject;
  return proto.visualization.DeleteObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.DeleteObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.DeleteObject}
 */
proto.visualization.DeleteObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.DeleteObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.DeleteObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.DeleteObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.DeleteObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.visualization.DeleteObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.DeleteObject.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.SetGridVisible = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.SetGridVisible, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.SetGridVisible.displayName = 'proto.visualization.SetGridVisible';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.SetGridVisible.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.SetGridVisible.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.SetGridVisible} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetGridVisible.toObject = function(includeInstance, msg) {
  var f, obj = {
    visible: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.SetGridVisible}
 */
proto.visualization.SetGridVisible.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.SetGridVisible;
  return proto.visualization.SetGridVisible.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.SetGridVisible} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.SetGridVisible}
 */
proto.visualization.SetGridVisible.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.SetGridVisible.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.SetGridVisible.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.SetGridVisible} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetGridVisible.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.SetGridVisible.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.visualization.SetGridVisible.prototype.setVisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.SetAxesVisible = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.SetAxesVisible, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.SetAxesVisible.displayName = 'proto.visualization.SetAxesVisible';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.SetAxesVisible.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.SetAxesVisible.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.SetAxesVisible} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetAxesVisible.toObject = function(includeInstance, msg) {
  var f, obj = {
    visible: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.SetAxesVisible}
 */
proto.visualization.SetAxesVisible.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.SetAxesVisible;
  return proto.visualization.SetAxesVisible.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.SetAxesVisible} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.SetAxesVisible}
 */
proto.visualization.SetAxesVisible.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.SetAxesVisible.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.SetAxesVisible.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.SetAxesVisible} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetAxesVisible.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.SetAxesVisible.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.visualization.SetAxesVisible.prototype.setVisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.SetTitle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.SetTitle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.SetTitle.displayName = 'proto.visualization.SetTitle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.SetTitle.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.SetTitle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.SetTitle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetTitle.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.SetTitle}
 */
proto.visualization.SetTitle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.SetTitle;
  return proto.visualization.SetTitle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.SetTitle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.SetTitle}
 */
proto.visualization.SetTitle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.SetTitle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.SetTitle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.SetTitle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetTitle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.visualization.SetTitle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.SetTitle.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.SetLegend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.SetLegend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.SetLegend.displayName = 'proto.visualization.SetLegend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.SetLegend.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.SetLegend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.SetLegend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetLegend.toObject = function(includeInstance, msg) {
  var f, obj = {
    visible: jspb.Message.getFieldWithDefault(msg, 1, false),
    fillColor: (f = msg.getFillColor()) && proto.visualization.ColorRGBA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.SetLegend}
 */
proto.visualization.SetLegend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.SetLegend;
  return proto.visualization.SetLegend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.SetLegend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.SetLegend}
 */
proto.visualization.SetLegend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    case 2:
      var value = new proto.visualization.ColorRGBA;
      reader.readMessage(value,proto.visualization.ColorRGBA.deserializeBinaryFromReader);
      msg.setFillColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.SetLegend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.SetLegend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.SetLegend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.SetLegend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFillColor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.ColorRGBA.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.SetLegend.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.visualization.SetLegend.prototype.setVisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ColorRGBA fill_color = 2;
 * @return {?proto.visualization.ColorRGBA}
 */
proto.visualization.SetLegend.prototype.getFillColor = function() {
  return /** @type{?proto.visualization.ColorRGBA} */ (
    jspb.Message.getWrapperField(this, proto.visualization.ColorRGBA, 2));
};


/** @param {?proto.visualization.ColorRGBA|undefined} value */
proto.visualization.SetLegend.prototype.setFillColor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.visualization.SetLegend.prototype.clearFillColor = function() {
  this.setFillColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.SetLegend.prototype.hasFillColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Set2DAxisProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.visualization.Set2DAxisProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Set2DAxisProperties.displayName = 'proto.visualization.Set2DAxisProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Set2DAxisProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Set2DAxisProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Set2DAxisProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Set2DAxisProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    xLabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    yLabel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    xMin: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    xMax: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    yMin: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    yMax: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    autoScale: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Set2DAxisProperties}
 */
proto.visualization.Set2DAxisProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Set2DAxisProperties;
  return proto.visualization.Set2DAxisProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Set2DAxisProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Set2DAxisProperties}
 */
proto.visualization.Set2DAxisProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setXLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setYLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYMin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYMax(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Set2DAxisProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Set2DAxisProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Set2DAxisProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Set2DAxisProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getYLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getXMin();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getXMax();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getYMin();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getYMax();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getAutoScale();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string x_label = 1;
 * @return {string}
 */
proto.visualization.Set2DAxisProperties.prototype.getXLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Set2DAxisProperties.prototype.setXLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string y_label = 2;
 * @return {string}
 */
proto.visualization.Set2DAxisProperties.prototype.getYLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.visualization.Set2DAxisProperties.prototype.setYLabel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float x_min = 3;
 * @return {number}
 */
proto.visualization.Set2DAxisProperties.prototype.getXMin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.visualization.Set2DAxisProperties.prototype.setXMin = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float x_max = 4;
 * @return {number}
 */
proto.visualization.Set2DAxisProperties.prototype.getXMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.visualization.Set2DAxisProperties.prototype.setXMax = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float y_min = 5;
 * @return {number}
 */
proto.visualization.Set2DAxisProperties.prototype.getYMin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.visualization.Set2DAxisProperties.prototype.setYMin = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float y_max = 6;
 * @return {number}
 */
proto.visualization.Set2DAxisProperties.prototype.getYMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.visualization.Set2DAxisProperties.prototype.setYMax = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional bool auto_scale = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.visualization.Set2DAxisProperties.prototype.getAutoScale = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.visualization.Set2DAxisProperties.prototype.setAutoScale = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Command2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Command2D.oneofGroups_);
};
goog.inherits(proto.visualization.Command2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Command2D.displayName = 'proto.visualization.Command2D';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Command2D.oneofGroups_ = [[1,2,3,4,10,11,12,13,14]];

/**
 * @enum {number}
 */
proto.visualization.Command2D.CommandTypeCase = {
  COMMAND_TYPE_NOT_SET: 0,
  ADD_OBJECT: 1,
  UPDATE_OBJECT_GEOMETRY: 2,
  UPDATE_OBJECT_PROPERTIES: 3,
  DELETE_OBJECT: 4,
  SET_GRID_VISIBLE: 10,
  SET_AXES_VISIBLE: 11,
  SET_TITLE: 12,
  SET_LEGEND: 13,
  SET_AXIS_PROPERTIES: 14
};

/**
 * @return {proto.visualization.Command2D.CommandTypeCase}
 */
proto.visualization.Command2D.prototype.getCommandTypeCase = function() {
  return /** @type {proto.visualization.Command2D.CommandTypeCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Command2D.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Command2D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Command2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Command2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Command2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    addObject: (f = msg.getAddObject()) && proto.visualization.Add2DObject.toObject(includeInstance, f),
    updateObjectGeometry: (f = msg.getUpdateObjectGeometry()) && proto.visualization.Update2DObjectGeometry.toObject(includeInstance, f),
    updateObjectProperties: (f = msg.getUpdateObjectProperties()) && proto.visualization.UpdateObjectProperties.toObject(includeInstance, f),
    deleteObject: (f = msg.getDeleteObject()) && proto.visualization.DeleteObject.toObject(includeInstance, f),
    setGridVisible: (f = msg.getSetGridVisible()) && proto.visualization.SetGridVisible.toObject(includeInstance, f),
    setAxesVisible: (f = msg.getSetAxesVisible()) && proto.visualization.SetAxesVisible.toObject(includeInstance, f),
    setTitle: (f = msg.getSetTitle()) && proto.visualization.SetTitle.toObject(includeInstance, f),
    setLegend: (f = msg.getSetLegend()) && proto.visualization.SetLegend.toObject(includeInstance, f),
    setAxisProperties: (f = msg.getSetAxisProperties()) && proto.visualization.Set2DAxisProperties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Command2D}
 */
proto.visualization.Command2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Command2D;
  return proto.visualization.Command2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Command2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Command2D}
 */
proto.visualization.Command2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Add2DObject;
      reader.readMessage(value,proto.visualization.Add2DObject.deserializeBinaryFromReader);
      msg.setAddObject(value);
      break;
    case 2:
      var value = new proto.visualization.Update2DObjectGeometry;
      reader.readMessage(value,proto.visualization.Update2DObjectGeometry.deserializeBinaryFromReader);
      msg.setUpdateObjectGeometry(value);
      break;
    case 3:
      var value = new proto.visualization.UpdateObjectProperties;
      reader.readMessage(value,proto.visualization.UpdateObjectProperties.deserializeBinaryFromReader);
      msg.setUpdateObjectProperties(value);
      break;
    case 4:
      var value = new proto.visualization.DeleteObject;
      reader.readMessage(value,proto.visualization.DeleteObject.deserializeBinaryFromReader);
      msg.setDeleteObject(value);
      break;
    case 10:
      var value = new proto.visualization.SetGridVisible;
      reader.readMessage(value,proto.visualization.SetGridVisible.deserializeBinaryFromReader);
      msg.setSetGridVisible(value);
      break;
    case 11:
      var value = new proto.visualization.SetAxesVisible;
      reader.readMessage(value,proto.visualization.SetAxesVisible.deserializeBinaryFromReader);
      msg.setSetAxesVisible(value);
      break;
    case 12:
      var value = new proto.visualization.SetTitle;
      reader.readMessage(value,proto.visualization.SetTitle.deserializeBinaryFromReader);
      msg.setSetTitle(value);
      break;
    case 13:
      var value = new proto.visualization.SetLegend;
      reader.readMessage(value,proto.visualization.SetLegend.deserializeBinaryFromReader);
      msg.setSetLegend(value);
      break;
    case 14:
      var value = new proto.visualization.Set2DAxisProperties;
      reader.readMessage(value,proto.visualization.Set2DAxisProperties.deserializeBinaryFromReader);
      msg.setSetAxisProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Command2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Command2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Command2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Command2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Add2DObject.serializeBinaryToWriter
    );
  }
  f = message.getUpdateObjectGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Update2DObjectGeometry.serializeBinaryToWriter
    );
  }
  f = message.getUpdateObjectProperties();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.UpdateObjectProperties.serializeBinaryToWriter
    );
  }
  f = message.getDeleteObject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.DeleteObject.serializeBinaryToWriter
    );
  }
  f = message.getSetGridVisible();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.visualization.SetGridVisible.serializeBinaryToWriter
    );
  }
  f = message.getSetAxesVisible();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.visualization.SetAxesVisible.serializeBinaryToWriter
    );
  }
  f = message.getSetTitle();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.visualization.SetTitle.serializeBinaryToWriter
    );
  }
  f = message.getSetLegend();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.visualization.SetLegend.serializeBinaryToWriter
    );
  }
  f = message.getSetAxisProperties();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.visualization.Set2DAxisProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional Add2DObject add_object = 1;
 * @return {?proto.visualization.Add2DObject}
 */
proto.visualization.Command2D.prototype.getAddObject = function() {
  return /** @type{?proto.visualization.Add2DObject} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Add2DObject, 1));
};


/** @param {?proto.visualization.Add2DObject|undefined} value */
proto.visualization.Command2D.prototype.setAddObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearAddObject = function() {
  this.setAddObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasAddObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Update2DObjectGeometry update_object_geometry = 2;
 * @return {?proto.visualization.Update2DObjectGeometry}
 */
proto.visualization.Command2D.prototype.getUpdateObjectGeometry = function() {
  return /** @type{?proto.visualization.Update2DObjectGeometry} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Update2DObjectGeometry, 2));
};


/** @param {?proto.visualization.Update2DObjectGeometry|undefined} value */
proto.visualization.Command2D.prototype.setUpdateObjectGeometry = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearUpdateObjectGeometry = function() {
  this.setUpdateObjectGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasUpdateObjectGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateObjectProperties update_object_properties = 3;
 * @return {?proto.visualization.UpdateObjectProperties}
 */
proto.visualization.Command2D.prototype.getUpdateObjectProperties = function() {
  return /** @type{?proto.visualization.UpdateObjectProperties} */ (
    jspb.Message.getWrapperField(this, proto.visualization.UpdateObjectProperties, 3));
};


/** @param {?proto.visualization.UpdateObjectProperties|undefined} value */
proto.visualization.Command2D.prototype.setUpdateObjectProperties = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearUpdateObjectProperties = function() {
  this.setUpdateObjectProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasUpdateObjectProperties = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeleteObject delete_object = 4;
 * @return {?proto.visualization.DeleteObject}
 */
proto.visualization.Command2D.prototype.getDeleteObject = function() {
  return /** @type{?proto.visualization.DeleteObject} */ (
    jspb.Message.getWrapperField(this, proto.visualization.DeleteObject, 4));
};


/** @param {?proto.visualization.DeleteObject|undefined} value */
proto.visualization.Command2D.prototype.setDeleteObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearDeleteObject = function() {
  this.setDeleteObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasDeleteObject = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetGridVisible set_grid_visible = 10;
 * @return {?proto.visualization.SetGridVisible}
 */
proto.visualization.Command2D.prototype.getSetGridVisible = function() {
  return /** @type{?proto.visualization.SetGridVisible} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetGridVisible, 10));
};


/** @param {?proto.visualization.SetGridVisible|undefined} value */
proto.visualization.Command2D.prototype.setSetGridVisible = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearSetGridVisible = function() {
  this.setSetGridVisible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasSetGridVisible = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SetAxesVisible set_axes_visible = 11;
 * @return {?proto.visualization.SetAxesVisible}
 */
proto.visualization.Command2D.prototype.getSetAxesVisible = function() {
  return /** @type{?proto.visualization.SetAxesVisible} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetAxesVisible, 11));
};


/** @param {?proto.visualization.SetAxesVisible|undefined} value */
proto.visualization.Command2D.prototype.setSetAxesVisible = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearSetAxesVisible = function() {
  this.setSetAxesVisible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasSetAxesVisible = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SetTitle set_title = 12;
 * @return {?proto.visualization.SetTitle}
 */
proto.visualization.Command2D.prototype.getSetTitle = function() {
  return /** @type{?proto.visualization.SetTitle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetTitle, 12));
};


/** @param {?proto.visualization.SetTitle|undefined} value */
proto.visualization.Command2D.prototype.setSetTitle = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearSetTitle = function() {
  this.setSetTitle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasSetTitle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SetLegend set_legend = 13;
 * @return {?proto.visualization.SetLegend}
 */
proto.visualization.Command2D.prototype.getSetLegend = function() {
  return /** @type{?proto.visualization.SetLegend} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetLegend, 13));
};


/** @param {?proto.visualization.SetLegend|undefined} value */
proto.visualization.Command2D.prototype.setSetLegend = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearSetLegend = function() {
  this.setSetLegend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasSetLegend = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Set2DAxisProperties set_axis_properties = 14;
 * @return {?proto.visualization.Set2DAxisProperties}
 */
proto.visualization.Command2D.prototype.getSetAxisProperties = function() {
  return /** @type{?proto.visualization.Set2DAxisProperties} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Set2DAxisProperties, 14));
};


/** @param {?proto.visualization.Set2DAxisProperties|undefined} value */
proto.visualization.Command2D.prototype.setSetAxisProperties = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.visualization.Command2D.oneofGroups_[0], value);
};


proto.visualization.Command2D.prototype.clearSetAxisProperties = function() {
  this.setSetAxisProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command2D.prototype.hasSetAxisProperties = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Command3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.Command3D.oneofGroups_);
};
goog.inherits(proto.visualization.Command3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Command3D.displayName = 'proto.visualization.Command3D';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.Command3D.oneofGroups_ = [[1,2,3,4,10,11,12,13]];

/**
 * @enum {number}
 */
proto.visualization.Command3D.CommandTypeCase = {
  COMMAND_TYPE_NOT_SET: 0,
  ADD_OBJECT: 1,
  UPDATE_OBJECT_GEOMETRY: 2,
  UPDATE_OBJECT_PROPERTIES: 3,
  DELETE_OBJECT: 4,
  SET_GRID_VISIBLE: 10,
  SET_AXES_VISIBLE: 11,
  SET_TITLE: 12,
  SET_LEGEND: 13
};

/**
 * @return {proto.visualization.Command3D.CommandTypeCase}
 */
proto.visualization.Command3D.prototype.getCommandTypeCase = function() {
  return /** @type {proto.visualization.Command3D.CommandTypeCase} */(jspb.Message.computeOneofCase(this, proto.visualization.Command3D.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Command3D.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Command3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Command3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Command3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    addObject: (f = msg.getAddObject()) && proto.visualization.Add3DObject.toObject(includeInstance, f),
    updateObjectGeometry: (f = msg.getUpdateObjectGeometry()) && proto.visualization.Update3DObjectGeometry.toObject(includeInstance, f),
    updateObjectProperties: (f = msg.getUpdateObjectProperties()) && proto.visualization.UpdateObjectProperties.toObject(includeInstance, f),
    deleteObject: (f = msg.getDeleteObject()) && proto.visualization.DeleteObject.toObject(includeInstance, f),
    setGridVisible: (f = msg.getSetGridVisible()) && proto.visualization.SetGridVisible.toObject(includeInstance, f),
    setAxesVisible: (f = msg.getSetAxesVisible()) && proto.visualization.SetAxesVisible.toObject(includeInstance, f),
    setTitle: (f = msg.getSetTitle()) && proto.visualization.SetTitle.toObject(includeInstance, f),
    setLegend: (f = msg.getSetLegend()) && proto.visualization.SetLegend.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Command3D}
 */
proto.visualization.Command3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Command3D;
  return proto.visualization.Command3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Command3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Command3D}
 */
proto.visualization.Command3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Add3DObject;
      reader.readMessage(value,proto.visualization.Add3DObject.deserializeBinaryFromReader);
      msg.setAddObject(value);
      break;
    case 2:
      var value = new proto.visualization.Update3DObjectGeometry;
      reader.readMessage(value,proto.visualization.Update3DObjectGeometry.deserializeBinaryFromReader);
      msg.setUpdateObjectGeometry(value);
      break;
    case 3:
      var value = new proto.visualization.UpdateObjectProperties;
      reader.readMessage(value,proto.visualization.UpdateObjectProperties.deserializeBinaryFromReader);
      msg.setUpdateObjectProperties(value);
      break;
    case 4:
      var value = new proto.visualization.DeleteObject;
      reader.readMessage(value,proto.visualization.DeleteObject.deserializeBinaryFromReader);
      msg.setDeleteObject(value);
      break;
    case 10:
      var value = new proto.visualization.SetGridVisible;
      reader.readMessage(value,proto.visualization.SetGridVisible.deserializeBinaryFromReader);
      msg.setSetGridVisible(value);
      break;
    case 11:
      var value = new proto.visualization.SetAxesVisible;
      reader.readMessage(value,proto.visualization.SetAxesVisible.deserializeBinaryFromReader);
      msg.setSetAxesVisible(value);
      break;
    case 12:
      var value = new proto.visualization.SetTitle;
      reader.readMessage(value,proto.visualization.SetTitle.deserializeBinaryFromReader);
      msg.setSetTitle(value);
      break;
    case 13:
      var value = new proto.visualization.SetLegend;
      reader.readMessage(value,proto.visualization.SetLegend.deserializeBinaryFromReader);
      msg.setSetLegend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Command3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Command3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Command3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Command3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Add3DObject.serializeBinaryToWriter
    );
  }
  f = message.getUpdateObjectGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Update3DObjectGeometry.serializeBinaryToWriter
    );
  }
  f = message.getUpdateObjectProperties();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.visualization.UpdateObjectProperties.serializeBinaryToWriter
    );
  }
  f = message.getDeleteObject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.visualization.DeleteObject.serializeBinaryToWriter
    );
  }
  f = message.getSetGridVisible();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.visualization.SetGridVisible.serializeBinaryToWriter
    );
  }
  f = message.getSetAxesVisible();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.visualization.SetAxesVisible.serializeBinaryToWriter
    );
  }
  f = message.getSetTitle();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.visualization.SetTitle.serializeBinaryToWriter
    );
  }
  f = message.getSetLegend();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.visualization.SetLegend.serializeBinaryToWriter
    );
  }
};


/**
 * optional Add3DObject add_object = 1;
 * @return {?proto.visualization.Add3DObject}
 */
proto.visualization.Command3D.prototype.getAddObject = function() {
  return /** @type{?proto.visualization.Add3DObject} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Add3DObject, 1));
};


/** @param {?proto.visualization.Add3DObject|undefined} value */
proto.visualization.Command3D.prototype.setAddObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearAddObject = function() {
  this.setAddObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasAddObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Update3DObjectGeometry update_object_geometry = 2;
 * @return {?proto.visualization.Update3DObjectGeometry}
 */
proto.visualization.Command3D.prototype.getUpdateObjectGeometry = function() {
  return /** @type{?proto.visualization.Update3DObjectGeometry} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Update3DObjectGeometry, 2));
};


/** @param {?proto.visualization.Update3DObjectGeometry|undefined} value */
proto.visualization.Command3D.prototype.setUpdateObjectGeometry = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearUpdateObjectGeometry = function() {
  this.setUpdateObjectGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasUpdateObjectGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateObjectProperties update_object_properties = 3;
 * @return {?proto.visualization.UpdateObjectProperties}
 */
proto.visualization.Command3D.prototype.getUpdateObjectProperties = function() {
  return /** @type{?proto.visualization.UpdateObjectProperties} */ (
    jspb.Message.getWrapperField(this, proto.visualization.UpdateObjectProperties, 3));
};


/** @param {?proto.visualization.UpdateObjectProperties|undefined} value */
proto.visualization.Command3D.prototype.setUpdateObjectProperties = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearUpdateObjectProperties = function() {
  this.setUpdateObjectProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasUpdateObjectProperties = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeleteObject delete_object = 4;
 * @return {?proto.visualization.DeleteObject}
 */
proto.visualization.Command3D.prototype.getDeleteObject = function() {
  return /** @type{?proto.visualization.DeleteObject} */ (
    jspb.Message.getWrapperField(this, proto.visualization.DeleteObject, 4));
};


/** @param {?proto.visualization.DeleteObject|undefined} value */
proto.visualization.Command3D.prototype.setDeleteObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearDeleteObject = function() {
  this.setDeleteObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasDeleteObject = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetGridVisible set_grid_visible = 10;
 * @return {?proto.visualization.SetGridVisible}
 */
proto.visualization.Command3D.prototype.getSetGridVisible = function() {
  return /** @type{?proto.visualization.SetGridVisible} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetGridVisible, 10));
};


/** @param {?proto.visualization.SetGridVisible|undefined} value */
proto.visualization.Command3D.prototype.setSetGridVisible = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearSetGridVisible = function() {
  this.setSetGridVisible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasSetGridVisible = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SetAxesVisible set_axes_visible = 11;
 * @return {?proto.visualization.SetAxesVisible}
 */
proto.visualization.Command3D.prototype.getSetAxesVisible = function() {
  return /** @type{?proto.visualization.SetAxesVisible} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetAxesVisible, 11));
};


/** @param {?proto.visualization.SetAxesVisible|undefined} value */
proto.visualization.Command3D.prototype.setSetAxesVisible = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearSetAxesVisible = function() {
  this.setSetAxesVisible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasSetAxesVisible = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SetTitle set_title = 12;
 * @return {?proto.visualization.SetTitle}
 */
proto.visualization.Command3D.prototype.getSetTitle = function() {
  return /** @type{?proto.visualization.SetTitle} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetTitle, 12));
};


/** @param {?proto.visualization.SetTitle|undefined} value */
proto.visualization.Command3D.prototype.setSetTitle = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearSetTitle = function() {
  this.setSetTitle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasSetTitle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SetLegend set_legend = 13;
 * @return {?proto.visualization.SetLegend}
 */
proto.visualization.Command3D.prototype.getSetLegend = function() {
  return /** @type{?proto.visualization.SetLegend} */ (
    jspb.Message.getWrapperField(this, proto.visualization.SetLegend, 13));
};


/** @param {?proto.visualization.SetLegend|undefined} value */
proto.visualization.Command3D.prototype.setSetLegend = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.visualization.Command3D.oneofGroups_[0], value);
};


proto.visualization.Command3D.prototype.clearSetLegend = function() {
  this.setSetLegend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.Command3D.prototype.hasSetLegend = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Scene2DUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.Scene2DUpdate.repeatedFields_, null);
};
goog.inherits(proto.visualization.Scene2DUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Scene2DUpdate.displayName = 'proto.visualization.Scene2DUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.Scene2DUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Scene2DUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Scene2DUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Scene2DUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Scene2DUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    windowId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.visualization.Command2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Scene2DUpdate}
 */
proto.visualization.Scene2DUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Scene2DUpdate;
  return proto.visualization.Scene2DUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Scene2DUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Scene2DUpdate}
 */
proto.visualization.Scene2DUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindowId(value);
      break;
    case 2:
      var value = new proto.visualization.Command2D;
      reader.readMessage(value,proto.visualization.Command2D.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Scene2DUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Scene2DUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Scene2DUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Scene2DUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWindowId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.visualization.Command2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string window_id = 1;
 * @return {string}
 */
proto.visualization.Scene2DUpdate.prototype.getWindowId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Scene2DUpdate.prototype.setWindowId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Command2D commands = 2;
 * @return {!Array<!proto.visualization.Command2D>}
 */
proto.visualization.Scene2DUpdate.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.visualization.Command2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Command2D, 2));
};


/** @param {!Array<!proto.visualization.Command2D>} value */
proto.visualization.Scene2DUpdate.prototype.setCommandsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.visualization.Command2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Command2D}
 */
proto.visualization.Scene2DUpdate.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.visualization.Command2D, opt_index);
};


proto.visualization.Scene2DUpdate.prototype.clearCommandsList = function() {
  this.setCommandsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.Scene3DUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.visualization.Scene3DUpdate.repeatedFields_, null);
};
goog.inherits(proto.visualization.Scene3DUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.Scene3DUpdate.displayName = 'proto.visualization.Scene3DUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.visualization.Scene3DUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.Scene3DUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.Scene3DUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.Scene3DUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Scene3DUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    windowId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.visualization.Command3D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.Scene3DUpdate}
 */
proto.visualization.Scene3DUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.Scene3DUpdate;
  return proto.visualization.Scene3DUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.Scene3DUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.Scene3DUpdate}
 */
proto.visualization.Scene3DUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindowId(value);
      break;
    case 2:
      var value = new proto.visualization.Command3D;
      reader.readMessage(value,proto.visualization.Command3D.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.Scene3DUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.Scene3DUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.Scene3DUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.Scene3DUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWindowId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.visualization.Command3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string window_id = 1;
 * @return {string}
 */
proto.visualization.Scene3DUpdate.prototype.getWindowId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.visualization.Scene3DUpdate.prototype.setWindowId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Command3D commands = 2;
 * @return {!Array<!proto.visualization.Command3D>}
 */
proto.visualization.Scene3DUpdate.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.visualization.Command3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.visualization.Command3D, 2));
};


/** @param {!Array<!proto.visualization.Command3D>} value */
proto.visualization.Scene3DUpdate.prototype.setCommandsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.visualization.Command3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.visualization.Command3D}
 */
proto.visualization.Scene3DUpdate.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.visualization.Command3D, opt_index);
};


proto.visualization.Scene3DUpdate.prototype.clearCommandsList = function() {
  this.setCommandsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.visualization.VisMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.visualization.VisMessage.oneofGroups_);
};
goog.inherits(proto.visualization.VisMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.visualization.VisMessage.displayName = 'proto.visualization.VisMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.visualization.VisMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.visualization.VisMessage.MessageDataCase = {
  MESSAGE_DATA_NOT_SET: 0,
  SCENE_2D_UPDATE: 1,
  SCENE_3D_UPDATE: 2
};

/**
 * @return {proto.visualization.VisMessage.MessageDataCase}
 */
proto.visualization.VisMessage.prototype.getMessageDataCase = function() {
  return /** @type {proto.visualization.VisMessage.MessageDataCase} */(jspb.Message.computeOneofCase(this, proto.visualization.VisMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.visualization.VisMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.visualization.VisMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.visualization.VisMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.VisMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    scene2dUpdate: (f = msg.getScene2dUpdate()) && proto.visualization.Scene2DUpdate.toObject(includeInstance, f),
    scene3dUpdate: (f = msg.getScene3dUpdate()) && proto.visualization.Scene3DUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.visualization.VisMessage}
 */
proto.visualization.VisMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.visualization.VisMessage;
  return proto.visualization.VisMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.visualization.VisMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.visualization.VisMessage}
 */
proto.visualization.VisMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.visualization.Scene2DUpdate;
      reader.readMessage(value,proto.visualization.Scene2DUpdate.deserializeBinaryFromReader);
      msg.setScene2dUpdate(value);
      break;
    case 2:
      var value = new proto.visualization.Scene3DUpdate;
      reader.readMessage(value,proto.visualization.Scene3DUpdate.deserializeBinaryFromReader);
      msg.setScene3dUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.visualization.VisMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.visualization.VisMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.visualization.VisMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.visualization.VisMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScene2dUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.visualization.Scene2DUpdate.serializeBinaryToWriter
    );
  }
  f = message.getScene3dUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.visualization.Scene3DUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scene2DUpdate scene_2d_update = 1;
 * @return {?proto.visualization.Scene2DUpdate}
 */
proto.visualization.VisMessage.prototype.getScene2dUpdate = function() {
  return /** @type{?proto.visualization.Scene2DUpdate} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Scene2DUpdate, 1));
};


/** @param {?proto.visualization.Scene2DUpdate|undefined} value */
proto.visualization.VisMessage.prototype.setScene2dUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.visualization.VisMessage.oneofGroups_[0], value);
};


proto.visualization.VisMessage.prototype.clearScene2dUpdate = function() {
  this.setScene2dUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.VisMessage.prototype.hasScene2dUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scene3DUpdate scene_3d_update = 2;
 * @return {?proto.visualization.Scene3DUpdate}
 */
proto.visualization.VisMessage.prototype.getScene3dUpdate = function() {
  return /** @type{?proto.visualization.Scene3DUpdate} */ (
    jspb.Message.getWrapperField(this, proto.visualization.Scene3DUpdate, 2));
};


/** @param {?proto.visualization.Scene3DUpdate|undefined} value */
proto.visualization.VisMessage.prototype.setScene3dUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.visualization.VisMessage.oneofGroups_[0], value);
};


proto.visualization.VisMessage.prototype.clearScene3dUpdate = function() {
  this.setScene3dUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.visualization.VisMessage.prototype.hasScene3dUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


